CUR_DIR := $(shell pwd)
OUT_DIR := $(CUR_DIR)
BIN_DIR := $(OUT_DIR)
OBJ_DIR := $(OUT_DIR)/objs

CC = gcc
CFLAGS = -g -Wall

define src_to_obj
.PHONY: $1
$1: $2
	@mkdir -p $(dir $1)
	$(CC) $(CFLAGS) -c $2 -o $1
endef

define make_app
$(eval src_files := $(foreach file,$2,$(notdir $(file)))) # make sure we use the relative path
$(eval objs := $(addprefix $(OBJ_DIR)/,$(patsubst %.c,%.o,$(src_files))))

$(foreach src_file,$(src_files),$(eval $(call src_to_obj,$(addprefix $(OBJ_DIR)/,\
    $(patsubst %.c,%.o,$(src_file))),$(addprefix $(CUR_DIR)/,$(src_file)))))

$(eval app := $(addprefix $(BIN_DIR)/,$(1)))

.DEFAULT_GOAL = $(1)
.PHONY: $(1)
$(1): $(app)

# TODO: although the objects exist and the source files are not changed, make
# keeps on remaking the targets in make_app. Maybe a bug of gnu-make?
$(app): $(strip $(objs))
	@mkdir -p $(BIN_DIR)
	$(CC) $(CFLAGS) -o $(app) $(objs)

.PHONY: clean
clean:
	-@rm -fr $(app) $(OBJ_DIR)
	@echo "$(strip $(1)) cleanned"

endef

export make_app
